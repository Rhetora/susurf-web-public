# Generated by Django 3.0.6 on 2020-08-22 08:03

from django.db import migrations, models
import django.utils.timezone
import fernet_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, verbose_name='Committee Member')),
                ('member_type', fernet_fields.fields.EncryptedCharField(choices=[('Student', 'Student'), ('Staff', 'Staff'), ('Alumni', 'Alumni'), ('Other', 'Other'), ('None', 'Not Affiliated')], default='None', max_length=15, verbose_name='Member Type')),
                ('first_name', fernet_fields.fields.EncryptedCharField(max_length=30, verbose_name='First Name')),
                ('last_name', fernet_fields.fields.EncryptedCharField(max_length=70, verbose_name='Surname')),
                ('dob', fernet_fields.fields.EncryptedDateField(null=True, verbose_name='Date of Birth')),
                ('student_id', fernet_fields.fields.EncryptedCharField(max_length=10, verbose_name='Student ID')),
                ('dietary', fernet_fields.fields.EncryptedTextField(blank=True, verbose_name='Dietary Requirements')),
                ('medical', fernet_fields.fields.EncryptedTextField(blank=True, verbose_name='Medical Requirements')),
                ('phone', fernet_fields.fields.EncryptedCharField(max_length=20, verbose_name='Phone Number')),
                ('bio', fernet_fields.fields.EncryptedTextField(blank=True, verbose_name='Bio')),
                ('kin_name', fernet_fields.fields.EncryptedCharField(max_length=100, verbose_name='Next of Kin Name')),
                ('kin_relation', fernet_fields.fields.EncryptedCharField(max_length=50, verbose_name='Next of Kin Relation')),
                ('kin_number', fernet_fields.fields.EncryptedCharField(max_length=20, verbose_name='Next of Kin Phone Number')),
                ('kin_address1', fernet_fields.fields.EncryptedCharField(max_length=100, verbose_name='Next of Kin Address 1')),
                ('kin_address2', fernet_fields.fields.EncryptedCharField(blank=True, max_length=100, verbose_name='Next of Kin Address 2')),
                ('kin_address3', fernet_fields.fields.EncryptedCharField(blank=True, max_length=100, verbose_name='Next of Kin Address 3')),
                ('kin_postcode', fernet_fields.fields.EncryptedCharField(max_length=8, verbose_name='Next of Kin Postcode')),
                ('ability', fernet_fields.fields.EncryptedCharField(choices=[('Beginner', 'New to surfing'), ('Novice', 'Surfing whitewater'), ('Intermediate', 'Surfing green waves'), ('Advanced', 'Confident surfer'), ('Pro', 'Shredding')], default='Beginner', max_length=30, verbose_name='Ability')),
                ('wetsuit', models.BooleanField(default=False, verbose_name='Owns a Wetsuit')),
                ('large_board', models.BooleanField(default=False, verbose_name='Owns a Large Board')),
                ('short_board', models.BooleanField(default=False, verbose_name='Owns a Shortboard')),
                ('car', models.BooleanField(default=False, verbose_name='Owns a Car')),
                ('car_seats', fernet_fields.fields.EncryptedCharField(blank=True, max_length=1, verbose_name='Number of seats in car')),
                ('minibus', models.BooleanField(default=False, verbose_name='Can Drive Minibus')),
                ('swim100m', models.BooleanField(default=False, verbose_name='Can Swim 100m')),
                ('paid', models.BooleanField(default=False, verbose_name='Paid Membership')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
